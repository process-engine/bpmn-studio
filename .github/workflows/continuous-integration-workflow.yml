name: Node CI

on:
  push:
    branches:
      - "*"
      - "*/*"

jobs:
  prepare_version:
    name: Prepare Version
    runs-on: ubuntu-18.04
    if: "!contains(github.actor, 'process-engine-ci') || contains(github.actor, 'admin')"

    steps:
    - uses: actions/checkout@v1

    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x

    - name: Show Actor
      run: echo $ACTOR
      env:
        ACTOR: ${{ github.actor }}

    - name: Install CI Tools
      run: npm ci
    - name: Prepare version
      run: |
        ./node_modules/.bin/ci_tools prepare-version --allow-dirty-workdir

    - name: Stash package.json
      uses: actions/upload-artifact@master
      with:
        name: package_json
        path: package.json

  lint_linux:
    name: "Lint Sources"
    needs: prepare_version
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1

    - name: Unstash package.json
      uses: actions/download-artifact@master
      with:
        name: package_json
        path: "."

    - name: Install npm Dependencies
      run: |
        cat package.json
        npm ci

    - run: npm run lint

  build_and_test_linux:
    name: "Build & Test (Linux)"
    needs: prepare_version
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1

    - name: Unstash package.json
      uses: actions/download-artifact@master
      with:
        name: package_json
        path: "."

    - name: Install npm Dependencies
      run: |
        npm ci
        ./node_modules/.bin/ci_tools npm-install-only --except-on-primary-branches @process-engine/ @essential-projects/
    - name: Build the Web App
      run: npm run build

    - name: Run the Tests
      run: npm test

    - name: Create Tarball
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/beta' || github.ref == 'refs/heads/develop'
      run: npm run create-tarball

    - name: Stash Tarball
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/beta' || github.ref == 'refs/heads/develop'
      uses: actions/upload-artifact@master
      with:
        name: bpmn-studio_tar
        path: bpmn-studio.tar.gz

    - name: Bundle Web
      run: |
        mkdir -p dist_web/dist/web
        cp index.html dist_web/index.html
        cp -r dist/web dist_web/dist
        mkdir -p dist_web/src/resources
        cp -r src/resources dist_web/src
        cp favicon.ico dist_web/

    - uses: actions/upload-artifact@master
      name: Upload Web App
      with:
        name: dist_web
        path: dist_web

  build_and_test_macos:
    name: "Build & Test (macOS)"
    needs: prepare_version
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x

    - name: Unstash package.json
      uses: actions/download-artifact@master
      with:
        name: package_json
        path: "."

    - name: Install npm Dependencies
      run: |
        npm ci
        ./node_modules/.bin/ci_tools npm-install-only --except-on-primary-branches @process-engine/ @essential-projects/

    - name: Build the Electron App
      run: npm run electron-build-macos
      env:
        CSC_LINK: ${{ secrets.CSC_LINK }}

    # - name: Run the Tests
    #   run: npm test

    - uses: actions/upload-artifact@master
      name: Upload Test Videos
      if: always()
      with:
        name: test_results_macos
        path: test-results

    - name: Prepare macOS Bundle
      run: |
        mkdir dist_electron_macos
        cp dist/electron/bpmn-studio-setup**.zip dist_electron_macos
        cp dist/electron/bpmn-studio-setup**.dmg dist_electron_macos

    - name: Prepare macOS Bundle for GitHub Release
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/beta' || github.ref == 'refs/heads/develop'
      run: |
        cp dist/electron/bpmn-studio-setup**.dmg.blockmap dist_electron_macos
        cp dist/electron/latest-mac.yml dist_electron_macos

    - uses: actions/upload-artifact@master
      name: Upload Electron macOS app
      with:
        name: dist_electron_macos
        path: dist_electron_macos

    - name: Slack Notification
      uses: homoluctus/slatify@master
      if: always()
      with:
        type: ${{ job.status }}
        job_name: 'macOS Tests'
        mention_if: 'always'
        url: ${{ secrets.SLACK_WEBHOOK }}
        commit: true
        token: ${{ secrets.GH_TOKEN }}

  build_and_test_windows:
    name: "Build & Test (Windows)"
    needs: prepare_version
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x

    - name: Unstash package.json
      uses: actions/download-artifact@master
      with:
        name: package_json
        path: "."

    - name: Install npm Dependencies
      run: |
        npm ci --no-optional
        ./node_modules/.bin/ci_tools npm-install-only --except-on-primary-branches @process-engine/ @essential-projects/
      shell: powershell

    - name: Build the Electron App
      run: npm run electron-build-windows-installer

    - name: Run the Tests
      run: npm test

    - uses: actions/upload-artifact@master
      name: Upload Test Videos
      if: always()
      with:
        name: test_results_windows
        path: test-results

    - name: Prepare Windows Bundle
      run: |
        mkdir dist_electron_windows
        copy-item .\dist\electron\bpmn-studio-setup-**.exe .\dist_electron_windows\
      shell: powershell

    - name: Prepare Windows Bundle for GitHub Release
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/beta' || github.ref == 'refs/heads/develop'
      run: |
        copy-item .\dist\electron\bpmn-studio-setup-**.exe.blockmap .\dist_electron_windows\
        copy-item .\dist\electron\latest.yml .\dist_electron_windows\
      shell: powershell

    - uses: actions/upload-artifact@master
      name: Upload Electron Windows App
      with:
        name: dist_electron_windows
        path: dist_electron_windows

    - name: Slack Notification
      uses: homoluctus/slatify@master
      if: always()
      with:
        type: ${{ job.status }}
        job_name: 'Windows Tests'
        mention_if: 'always'
        url: ${{ secrets.SLACK_WEBHOOK }}
        commit: true
        token: ${{ secrets.GH_TOKEN }}

  prepare_and_tag_version:
    name: "Commit & Tag Version"
    needs: [build_and_test_linux, build_and_test_macos, build_and_test_windows]
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x

    - name: Unstash package.json
      uses: actions/download-artifact@master
      with:
        name: package_json
        path: "."

    - name: Install CI Tools
      run: npm ci

    - name: Commit and Tag
      run: |
        ./node_modules/.bin/ci_tools commit-and-tag-version --only-on-primary-branches
        ./node_modules/.bin/ci_tools update-github-release --only-on-primary-branches --use-title-and-text-from-git-tag
      env:
        GH_USER: ${{ secrets.GH_USER }}
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

  publish_npm:
    name: "Publish npm Package"
    needs: prepare_and_tag_version
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x

    - name: Unstash package.json
      uses: actions/download-artifact@master
      with:
        name: package_json
        path: "."

    - name: Install CI Tools
      run: npm ci

    - name: Publish npm package
      run: ./node_modules/.bin/ci_tools publish-npm-package --create-tag-from-branch-name
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish_github:
    name: "Publish GitHub Release"
    needs: prepare_and_tag_version
    runs-on: ubuntu-18.04
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/beta' || github.ref == 'refs/heads/develop'

    steps:
    - uses: actions/checkout@v1

    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x

    - name: Unstash package.json
      uses: actions/download-artifact@master
      with:
        name: package_json
        path: "."

    - name: Unstash macOS Electron App
      uses: actions/download-artifact@master
      with:
        name: dist_electron_macos
        path: "dist/electron"

    - name: Unstash Windows Electron App
      uses: actions/download-artifact@master
      with:
        name: dist_electron_windows
        path: "dist/electron"

    - name: Install CI Tools
      run: npm ci

    - name: Upload to GitHub
      run: |
        ./node_modules/.bin/ci_tools update-github-release \
                              --assets dist/electron/bpmn-studio-setup-*.exe \
                              --assets dist/electron/bpmn-studio-setup-*.exe.blockmap \
                              --assets dist/electron/bpmn-studio-setup-*.zip \
                              --assets dist/electron/bpmn-studio-setup-*.dmg \
                              --assets dist/electron/bpmn-studio-setup-*.dmg.blockmap \
                              --assets dist/electron/latest-mac.yml \
                              --assets dist/electron/latest.yml
      env:
        GH_USER: ${{ secrets.GH_USER }}
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Slack Notification
      uses: homoluctus/slatify@master
      if: always()
      with:
        type: ${{ job.status }}
        job_name: 'GitHub Release'
        mention_if: 'always'
        url: ${{ secrets.SLACK_WEBHOOK }}
        commit: true
        token: ${{ secrets.GH_TOKEN }}

    - name: Announce Releasenotes
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/beta'
      run: |
        ./node_modules/.bin/ci_tools publish-releasenotes-on-slack
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_ANNOUNCER_WEBHOOK }}

    - name: Trigger Deployment of ProcessEngine.io
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/beta'
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.GH_TOKEN }}
        repository: process-engine/process-engine.github.io
        event-type: release_was_published

  build_docker:
    name: "Build & Publish Docker Image"
    needs: prepare_and_tag_version
    runs-on: ubuntu-18.04
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/beta' || github.ref == 'refs/heads/develop'

    steps:
    - uses: actions/checkout@v1

    - name: Unstash package.json
      uses: actions/download-artifact@master
      with:
        name: package_json
        path: "."

    - name: Unstash Tarball
      uses: actions/download-artifact@master
      with:
        name: bpmn-studio_tar
        path: "."

    - name: Install Dependencies
      run: npm ci

    - name: Build Docker Image
      if: github.ref == 'refs/heads/beta' || github.ref == 'refs/heads/develop'
      run: |
        VERSION="$(./node_modules/.bin/ci_tools get-version)"
        docker build --build-arg NODE_IMAGE_VERSION=10-alpine \
                    --build-arg BPMN_STUDIO_VERSION=$VERSION \
                    --no-cache \
                    --tag 5minds/bpmn-studio-bundle:$VERSION .

    - name: Build Docker Image Master
      if: github.ref == 'refs/heads/master'
      run: |
        VERSION="$(./node_modules/.bin/ci_tools get-version)"
        MAJOR_VERSION="$(./node_modules/.bin/ci_tools get-version --major)"
        docker build --build-arg NODE_IMAGE_VERSION=10-alpine \
                    --build-arg BPMN_STUDIO_VERSION=$VERSION \
                    --no-cache \
                    --tag 5minds/bpmn-studio-bundle:latest --tag 5minds/bpmn-studio-bundle:$MAJOR_VERSION --tag 5minds/bpmn-studio-bundle:$VERSION .

    - name: Show Docker Images
      run: docker images

    - name: Login to Docker
      run: echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASS: ${{ secrets.DOCKER_PASS }}

    - name: Push Docker Image
      run: docker push 5minds/bpmn-studio-bundle
